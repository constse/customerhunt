{#<script>#}
var hunter_replacement_city = null;
var hunter_replacement_cities = {{ cities|raw }};
var hunter_replacement_main_replacements = {{ main_replacements|raw }};
var hunter_replacement_parameters = {{ parameters|raw }};
var hunter_replacement_replacements = {{ replacements|raw }};

function hunter_replacement_to_assoc_array(query) {
    var parameters = {};
    var temp_parameters = query.split('&');

    for (var i = 0; i < temp_parameters.length; ++i) {
        var temp_parameter = temp_parameters[i].split('=');
        parameters[temp_parameter[0]] = temp_parameter[1];
    }

    return parameters;
}

function hunter_replacement_parse_url() {
    var query = window.location.search.substr(1);

    return (query != null && query != '') ? hunter_replacement_to_assoc_array(query) : {};
}

function hunter_replacement_init() {
    var city = hunter_replacement_city;

    var replacements_count = hunter_replacement_main_replacements.length;

    for (var i = 0; i < replacements_count; ++i) {
        var selector = hunter_replacement_main_replacements[i]['selector'];
        var replacement = hunter_replacement_main_replacements[i]['replacement'];

        if (city) {
            replacement = replacement.replace('%city%', city.caption);
            replacement = replacement.replace('%city_gen%', city.genitive);
            replacement = replacement.replace('%city_dat%', city.dative);
            replacement = replacement.replace('%city_acc%', city.accusative);
            replacement = replacement.replace('%city_abl%', city.ablative);
            replacement = replacement.replace('%city_pre%', city.prepositional);
        }

        $(selector).html(replacement);
    }

    var parameters = hunter_replacement_parse_url();
    var parameters_count = hunter_replacement_parameters.length;

    for (var i = 0; i < parameters_count; ++i) {
        if (parameters[hunter_replacement_parameters[i]]) {
            var parameter_name = hunter_replacement_parameters[i];
            var parameter_value = decodeURI(parameters[hunter_replacement_parameters[i]]);
            var selectors_count = hunter_replacement_replacements[parameter_name].length;

            for (var j = 0; j < selectors_count; ++j) {
                if (hunter_replacement_replacements[parameter_name][j].replacements[parameter_value]) {
                    var selector = hunter_replacement_replacements[parameter_name][j].selector;
                    var replacement = hunter_replacement_replacements[parameter_name][j].replacements[parameter_value]['default'];
                    var city_replacement = hunter_replacement_replacements[parameter_name][j].replacements[parameter_value]['city'];

                    if (city && city_replacement) {
                        city_replacement = city_replacement.replace('%city%', city.caption);
                        city_replacement = city_replacement.replace('%city_gen%', city.genitive);
                        city_replacement = city_replacement.replace('%city_dat%', city.dative);
                        city_replacement = city_replacement.replace('%city_acc%', city.accusative);
                        city_replacement = city_replacement.replace('%city_abl%', city.ablative);
                        city_replacement = city_replacement.replace('%city_pre%', city.prepositional);
                        replacement = city_replacement;
                    }

                    $(selector).html(replacement);
                }
            }
        }
    }
}

function hunter_replacement_ymaps_init() {
    var geolocation = ymaps.geolocation;
    var latitude = geolocation.latitude * Math.PI / 180.0, longitude = geolocation.longitude * Math.PI / 180.0;
    var cities_count = hunter_replacement_cities.length;
    var min = 1000000000, minIndex = 0;

    for (var i = 0; i < cities_count; ++i) {
        city_latitude = hunter_replacement_cities[i].latitude * Math.PI / 180.0;
        city_longitude = hunter_replacement_cities[i].longitude * Math.PI / 180.0;
        var l = Math.acos(Math.sin(city_latitude)*Math.sin(latitude)+Math.cos(latitude)*Math.cos(city_latitude)*Math.cos(city_longitude-longitude));

        if (l < min) { min = l; minIndex = i; }
    }

    hunter_replacement_city = hunter_replacement_cities[minIndex];
    hunter_replacement_init();
}

$(document).ready(function() {
    if (ymaps) ymaps.ready(hunter_replacement_ymaps_init);
    else hunter_replacement_init();
});
{#</script>#}